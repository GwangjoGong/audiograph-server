# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type TokenEarningLog {
  date: DateTime!
  copyrightFee: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Token {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  htsTokenId: String!
  initialPrice: Float!
  recentPrice: Float
  stock: Float
  totalStock: Float!
  status: TokenStatus!
  logs: [TokenEarningLog!]!
}

enum TokenStatus {
  Investing
  Open
  Close
}

type Music {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  coverImage: String!
  sourceUrl: String!
  artist: [String!]!
  composer: [String!]
  arranger: [String!]
  lyricist: [String!]
  copyrightPeriod: String
  copyrightTrust: String
  representativeTrustee: String
  caution: String
  publishDate: DateTime
  token: Token!
  investments: [Investment!]!
}

type Investment {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  amount: Float!
  price: Float!
  user: User!
  music: Music!
}

type User {
  id: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String!
  htsAccountId: String!
  privateKey: String!
  investments: [Investment!]!
}

type GetAccountBalanceOutput {
  error: String
  ok: Boolean!
  accountBalance: Float
}

type GetTokenBalanceOutput {
  error: String
  ok: Boolean!
  tokenBalance: String
}

type CreateAccountOutput {
  error: String
  ok: Boolean!
}

type LoginOutput {
  error: String
  ok: Boolean!
  token: String
}

type UserProfileOutput {
  error: String
  ok: Boolean!
  user: User
}

type CreateTokenOutput {
  error: String
  ok: Boolean!
  token: Token
}

type GetAllTokensOutput {
  error: String
  ok: Boolean!
  tokens: [Token!]
}

type GetTokenOutput {
  error: String
  ok: Boolean!
  token: Token
}

type UpdateTokenOutput {
  error: String
  ok: Boolean!
}

type CreateMusicOutput {
  error: String
  ok: Boolean!
}

type GetAllMusicsOutput {
  error: String
  ok: Boolean!
  musics: [Music!]
}

type GetMusicOutput {
  error: String
  ok: Boolean!
  music: Music
}

type UpdateMusicOutput {
  error: String
  ok: Boolean!
}

type CreateInvestmentOutput {
  error: String
  ok: Boolean!
}

type Query {
  me: User!
  getAccountBalance: GetAccountBalanceOutput!
  getTokenBalance: GetTokenBalanceOutput!
  userProfile(id: Float!): UserProfileOutput!
  getAllMusics: GetAllMusicsOutput!
  getTrendingMusics: GetAllMusicsOutput!
  getRecentMusics: GetAllMusicsOutput!
  getMusic(input: GetMusicInput!): GetMusicOutput!
  getAllTokens: GetAllTokensOutput!
  getToken(input: GetTokenInput!): GetTokenOutput!
  getMyInvestments: [Investment!]!
}

input GetMusicInput {
  id: Float!
}

input GetTokenInput {
  id: Float!
}

type Mutation {
  login(input: LoginInput!): LoginOutput!
  createAccount(input: CreateAccountInput!): CreateAccountOutput!
  createMusic(input: CreateMusicInput!): CreateMusicOutput!
  updateMusic(input: UpdateMusicInput!): UpdateMusicOutput!
  createToken(input: CreateTokenInput!): CreateTokenOutput!
  updateToken(input: UpdateTokenInput!): UpdateTokenOutput!
  createInvestment(input: CreateInvestmentInput!): CreateInvestmentOutput!
}

input LoginInput {
  email: String!
  password: String!
}

input CreateAccountInput {
  email: String!
  password: String!
}

input CreateMusicInput {
  title: String!
  coverImage: String!
  sourceUrl: String!
  artist: [String!]!
  composer: [String!]
  arranger: [String!]
  lyricist: [String!]
  copyrightPeriod: String
  copyrightTrust: String
  representativeTrustee: String
  caution: String
  publishDate: DateTime
  initialPrice: Float!
  totalStock: Float!
}

input UpdateMusicInput {
  title: String
  coverImage: String
  sourceUrl: String
  artist: [String!]
  composer: [String!]
  arranger: [String!]
  lyricist: [String!]
  copyrightPeriod: String
  copyrightTrust: String
  representativeTrustee: String
  caution: String
  publishDate: DateTime
  initialPrice: Float
  totalStock: Float
  id: Float!
}

input CreateTokenInput {
  initialPrice: Float!
  recentPrice: Float
  stock: Float
  totalStock: Float!
  status: TokenStatus = Investing
  logs: [TokenEarningLogInputType!] = []
  title: String!
}

input TokenEarningLogInputType {
  date: DateTime!
  copyrightFee: Float!
}

input UpdateTokenInput {
  initialPrice: Float
  recentPrice: Float
  stock: Float
  totalStock: Float
  status: TokenStatus = Investing
  logs: [TokenEarningLogInputType!] = []
  title: String
  tokenId: Float!
}

input CreateInvestmentInput {
  amount: Float!
  musicId: Float!
}
